# -*- coding: utf-8 -*-
"""step4-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e7oE-NLA8HpNd6RUT0Sk2iRO0eRSKgRM
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sn

data_dir = "drive/MyDrive/data/"
df = pd.read_csv(data_dir + "country_response_measures.csv")
df.head()

countries = df['Country'].drop_duplicates().reset_index().drop(['index'], axis = 1)
countries.head()
countries.shape

data = pd.read_csv(data_dir + "Global_Mobility_Report.csv")

countries = countries.Country.to_list()
data = data.loc[data['country_region'].isin(countries)]
data.head()

data['avg_retail_and_recreation_percent_change_from_baseline'] = data.groupby(['country_region','date'])['retail_and_recreation_percent_change_from_baseline'].transform('mean')
data['avg_grocery_and_pharmacy_percent_change_from_baseline'] = data.groupby(['country_region','date'])['grocery_and_pharmacy_percent_change_from_baseline'].transform('mean')
data['avg_parks_percent_change_from_baseline'] = data.groupby(['country_region','date'])['parks_percent_change_from_baseline'].transform('mean')
data['avg_transit_stations_percent_change_from_baseline'] = data.groupby(['country_region','date'])['transit_stations_percent_change_from_baseline'].transform('mean')
data['avg_workplaces_percent_change_from_baseline'] = data.groupby(['country_region','date'])['workplaces_percent_change_from_baseline'].transform('mean')
data['avg_residential_percent_change_from_baseline'] = data.groupby(['country_region','date'])['residential_percent_change_from_baseline'].transform('mean')
data.head()

data2 = data.drop_duplicates(['country_region','date'])
drop_cols = ['sub_region_1', 
             'sub_region_2', 
             'metro_area', 
             'iso_3166_2_code', 
             'census_fips_code', 
             'place_id', 
             'retail_and_recreation_percent_change_from_baseline', 
             'grocery_and_pharmacy_percent_change_from_baseline',
             'parks_percent_change_from_baseline',
             'transit_stations_percent_change_from_baseline',
             'workplaces_percent_change_from_baseline',
             'residential_percent_change_from_baseline']
data_cut = data2.drop(drop_cols, axis=1)
data_cut.head()

data_cut['month'] = pd.DatetimeIndex(data_cut['date']).month
data3 = data_cut
data_cut.head()

data_cut['month_avg_retail_and_recreation_percent_change_from_baseline'] = data_cut.groupby(['country_region','month'])['avg_retail_and_recreation_percent_change_from_baseline'].transform('mean')
data_cut['month_avg_grocery_and_pharmacy_percent_change_from_baseline'] = data_cut.groupby(['country_region','month'])['avg_grocery_and_pharmacy_percent_change_from_baseline'].transform('mean')
data_cut['month_avg_parks_percent_change_from_baseline'] = data_cut.groupby(['country_region','month'])['avg_parks_percent_change_from_baseline'].transform('mean')
data_cut['month_avg_transit_stations_percent_change_from_baseline'] = data_cut.groupby(['country_region','month'])['avg_transit_stations_percent_change_from_baseline'].transform('mean')
data_cut['month_avg_workplaces_percent_change_from_baseline'] = data_cut.groupby(['country_region','month'])['avg_workplaces_percent_change_from_baseline'].transform('mean')
data_cut['month_avg_residential_percent_change_from_baseline'] = data_cut.groupby(['country_region','month'])['avg_residential_percent_change_from_baseline'].transform('mean')
data_cut.head()
data3 = data_cut

data_cut = data_cut.drop_duplicates(['country_region','month'])
drop_cols = ['avg_retail_and_recreation_percent_change_from_baseline', 
             'avg_grocery_and_pharmacy_percent_change_from_baseline',
             'avg_parks_percent_change_from_baseline',
             'avg_transit_stations_percent_change_from_baseline',
             'avg_workplaces_percent_change_from_baseline',
             'avg_residential_percent_change_from_baseline',
             'date']
data_cut2 = data_cut.drop(drop_cols, axis=1)
data_cut2 = data_cut2.reset_index()
del data_cut2['index']
data_cut2.head()

drop_cols = ['month_avg_retail_and_recreation_percent_change_from_baseline', 
             'month_avg_grocery_and_pharmacy_percent_change_from_baseline',
             'month_avg_parks_percent_change_from_baseline',
             'month_avg_transit_stations_percent_change_from_baseline',
             'month_avg_workplaces_percent_change_from_baseline',
             'month_avg_residential_percent_change_from_baseline',
             'month']
data3 = data3.drop(drop_cols, axis=1)
data3 = data3.reset_index()
del data3['index']
data3.head()

france_mobility = data3.loc[data3['country_region'] == 'France']
france_mobility = france_mobility.reset_index()
del france_mobility['index']
france_mobility.head()

germany_mobility = data3.loc[data3['country_region'] == 'Germany']
germany_mobility = germany_mobility.reset_index()
del germany_mobility['index']
germany_mobility.head()

france_gdp = pd.read_csv(data_dir + "france_gdp.csv")
france_gdp.head()

france_data = pd.merge(france_mobility, france_gdp, on = 'date', how = 'left')
france_data = france_data.rename(columns={" value": "gdp"})
france_data.head()

germany_gdp = pd.read_csv(data_dir + "germany_gdp.csv")
germany_gdp.head()

germany_data = pd.merge(germany_mobility, germany_gdp, on = 'date', how = 'left')
germany_data = germany_data.rename(columns={" value": "gdp"})
germany_data.head()

manufacture = pd.read_csv(data_dir + "manufacture.csv")
manufacture.head()

manu_data = manufacture[manufacture.NACE_R2 == 'Manufacturing']
manu_data['GEO'] = manu_data['GEO'].replace(['Germany (until 1990 former territory of the FRG)'],'Germany')
manu_data.head()

lockdown_countries = ['Austria', 
                      'Belgium', 
                      'Croatia', 
                      'Cyprus', 
                      'Czechia', 
                      'Denmark', 
                      'Estonia', 
                      'Finland', 
                      'France', 
                      'Germany', 
                      'Greece', 
                      'Hungary', 
                      'Iceland', 
                      'Ireland', 
                      'Italy', 
                      'Latvia', 
                      'Lithuania', 
                      'Luxembourg', 
                      'Malta', 
                      'Netherlands', 
                      'Norway', 
                      'Poland', 
                      'Portugal', 
                      'Romania', 
                      'Slovakia', 
                      'Slovenia', 
                      'Spain', 
                      'Sweden']
manu_data = manu_data[manu_data.GEO.isin(lockdown_countries)]
manu_data.head()

manu_data = manu_data[manu_data.TIME.str.contains('2020')]
manu_data['month'] = manu_data['TIME'].str.slice(5, 7) 
manu_data['month'] = pd.to_datetime(manu_data['month'], format='%m')
manu_data['month'] = pd.DatetimeIndex(manu_data['month']).month
manu_data = manu_data.rename(columns={"GEO": "country_region", "Value" : "manufacturing_volume_idx_of_production"})
manu_data = manu_data[['country_region','manufacturing_volume_idx_of_production', 'month']]
manu_data.head()

lockdown_mobility = data_cut2[data_cut2.country_region.isin(lockdown_countries)]
lockdown_mobility.head()

lockdown_mobility_manu = pd.merge(lockdown_mobility, manu_data,  how='left', on=['country_region','month'])
lockdown_mobility_manu.head()

data4 = lockdown_mobility_manu.drop(['country_region_code'], axis=1)
data4 = data4.reset_index()
del data4['index']
data4 = data4.dropna()
data4.head()

data4 = data4[data4['manufacturing_volume_idx_of_production'] != ":"]

data4['manufacturing_volume_idx_of_production'] = pd.to_numeric(data4['manufacturing_volume_idx_of_production'])

data4 = data4.rename(columns={'month_avg_retail_and_recreation_percent_change_from_baseline' : 'retail_and_recreation', 
                              'month_avg_grocery_and_pharmacy_percent_change_from_baseline' : 'grocery_and_pharmacy', 
                              'month_avg_parks_percent_change_from_baseline' : 'parks',
                              'month_avg_transit_stations_percent_change_from_baseline' : 'transit_stations',
                              'month_avg_workplaces_percent_change_from_baseline' : 'workplaces',
                              'month_avg_residential_percent_change_from_baseline' : 'residential',
                              'manufacturing_volume_idx_of_production' : 'manufacturing'})

fig, (ax1, ax2) = plt.subplots(nrows=2, ncols = 3, sharey=True, figsize=(9,6))
sn.regplot(data=data4, y='manufacturing', x='retail_and_recreation', ax = ax1[0], scatter_kws={"color": "lightsteelblue"}, line_kws={"color": "salmon"})
sn.regplot(data=data4, y='manufacturing', x='grocery_and_pharmacy', ax = ax2[0], scatter_kws={"color": "lightsteelblue"}, line_kws={"color": "salmon"})
sn.regplot(data=data4, y='manufacturing', x='parks', ax = ax1[1], scatter_kws={"color": "lightsteelblue"}, line_kws={"color": "salmon"})
sn.regplot(data=data4, y='manufacturing', x='transit_stations', ax = ax2[1], scatter_kws={"color": "lightsteelblue"}, line_kws={"color": "salmon"})
sn.regplot(data=data4, y='manufacturing', x='workplaces', ax = ax1[2], scatter_kws={"color": "lightsteelblue"}, line_kws={"color": "salmon"})
sn.regplot(data=data4, y='manufacturing', x='residential', ax = ax2[2], scatter_kws={"color": "lightsteelblue"}, line_kws={"color": "salmon"})
plt.show()

france_gdp['month'] = pd.DatetimeIndex(france_gdp['date']).month
france_gdp['year'] = pd.DatetimeIndex(france_gdp['date']).year
france_gdp = france_gdp[france_gdp.year == 2020]
france_gdp['month_gdp'] = france_gdp.groupby(['month'])[' value'].transform('mean')
france_gdp = france_gdp.drop_duplicates(['month'])
france_gdp = france_gdp[['month', 'month_gdp']]
france_gdp = france_gdp.rename(columns={"month_gdp": "gdp"})
france_gdp.head()

france_econ = data4[data4.country_region == 'France']
france_econ_data = pd.merge(france_econ, france_gdp, on = 'month', how = 'left')
france_econ_data.head()

germany_gdp['month'] = pd.DatetimeIndex(germany_gdp['date']).month
germany_gdp['year'] = pd.DatetimeIndex(germany_gdp['date']).year
germany_gdp = germany_gdp[germany_gdp.year == 2020]
germany_gdp['month_gdp'] = germany_gdp.groupby(['month'])[' value'].transform('mean')
germany_gdp = germany_gdp.drop_duplicates(['month'])
germany_gdp = germany_gdp[['month', 'month_gdp']]
germany_gdp = germany_gdp.rename(columns={"month_gdp": "gdp"})
germany_gdp.head()

germany_econ = data4[data4.country_region == 'Germany']
germany_econ_data = pd.merge(germany_econ, germany_gdp, on = 'month', how = 'left')
germany_econ_data.head()

a4_dims = (14, 6)
fig, (ax1, ax2) = plt.subplots(figsize=a4_dims, ncols=2)

corrMatrix = france_econ_data.loc[:, france_econ_data.columns != 'month'].corr()
x = corrMatrix[['manufacturing', 'gdp']]
y = sn.heatmap(
    x.T, 
    ax=ax1, 
    vmin=-1, vmax=1, center=0,
    cmap=sn.diverging_palette(20, 220, n=200),
    square=True
)
y.set_title('France')

corrMatrix = germany_econ_data.loc[:, germany_econ_data.columns != 'month'].corr()
x = corrMatrix[['manufacturing', 'gdp']]
g = sn.heatmap(
    x.T, 
    ax=ax2, 
    vmin=-1, vmax=1, center=0,
    cmap=sn.diverging_palette(20, 220, n=200),
    square=True
)
g.set_title('Germany')
plt.show()
sn.reset_defaults()