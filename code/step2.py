# -*- coding: utf-8 -*-
"""exploration_citadel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xzavLsqEjlwcILwarVkqTISxKlQMeuqI
"""

import pandas as pd
import numpy as np 
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

DATA_DIR = '/content/drive/MyDrive/Datathon Materials/'
df_owid = pd.read_csv(DATA_DIR + "1_owid/owid-covid-data.csv")

df_owid

!pip install country_converter

import country_converter as coco
countries = ['Austria', 'Belgium', 'Croatia', 'Cyprus', 'Czechia', 'Denmark', 'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland', 'Italy', 'Latvia', 'Lithuania', 'Luxembourg', 'Malta', 'Netherlands', 'Norway', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia', 'Spain', 'Sweden']
standard_names = coco.convert(names=countries, to='iso3')
#print(standard_names)

diff = ['total_deaths_per_million', 'total_cases_per_million', 'total_tests_per_thousand', 'icu_patients_per_million', 'diabetes_prevalence', 'population', 'population_density', 'stringency_index', 'positive_rate', 'hospital_beds_per_thousand']

df = df_owid.fillna(method = 'ffill').fillna(method = 'bfill')

cols = list(df_owid.columns)
cols.append('cumulative_stringency')
full = pd.DataFrame(columns=cols)

dfs = []

for name, group in df.groupby("iso_code"):
    cm_index = []
    avg_index = []
    sum = 0
    count = 0
    for index, row in group.iterrows():
        cm_index.append(cm_index[-1] * 0.95 + 0.05 * row.stringency_index if len(cm_index) > 0 else row.stringency_index)
        sum += row.stringency_index
        count += 1
        avg_index.append(sum / count)
    
    group['cumulative_stringency'] = cm_index
    group['avg_stringency'] = avg_index
    # print (group[['stringency_index', 'cumulative_stringency']])
    dfs.append(group)

mega = pd.concat(dfs)

mega

#!pip install country_converter

import country_converter as coco
countries = ['Austria', 'Belgium', 'Croatia', 'Cyprus', 'Czechia', 'Denmark', 'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland', 'Italy', 'Latvia', 'Lithuania', 'Luxembourg', 'Malta', 'Netherlands', 'Norway', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia', 'Spain', 'Sweden']
standard_names = coco.convert(names=countries, to='iso3')
#print(standard_names)

#diff = ['total_deaths_per_million', 'total_cases_per_million', 'total_tests_per_thousand', 'icu_patients_per_million', 'diabetes_prevalence', 'population', 'population_density', 'stringency_index', 'positive_rate', 'hospital_beds_per_thousand']

corr1 = df[df.iso_code.isin(standard_names)].fillna(method = 'ffill').fillna(method = 'bfill')\
    [df.stringency_index < 40][diff].corr()
corr2 = df[df.iso_code.isin(standard_names)].fillna(method = 'ffill').fillna(method = 'bfill')\
    [(df.stringency_index < 70) & (df.stringency_index > 40)][diff].corr()
corr3 = df[df.iso_code.isin(standard_names)].fillna(method = 'ffill').fillna(method = 'bfill')\
    [df.stringency_index > 70][diff].corr()

a4_dims = (8, 8)
fig, ax = plt.subplots(figsize=a4_dims)

sns.heatmap(
    corr1, 
    ax=ax, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200)
)
a4_dims = (8, 8)
fig, ax = plt.subplots(figsize=a4_dims)

sns.heatmap(
    corr2, 
    ax=ax, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200)
)
a4_dims = (8, 8)
fig, ax = plt.subplots(figsize=a4_dims)

sns.heatmap(
    corr3, 
    ax=ax, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200)
)

over70 = mega[mega.iso_code.isin(standard_names)].fillna(method = 'ffill').fillna(method = 'bfill')\
    [df.stringency_index > 70]

for name, group in over70.groupby('iso_code'):
    plt.scatter(group.avg_stringency, group['reproduction_rate'], s=0.5)

plt.xlabel('cumulative_stringency')
plt.ylabel('reproduction_rate')

features = ['total_tests_per_thousand', 'new_deaths_smoothed_per_million', 'tests_units', 'positive_rate', 
            'gdp_per_capita', 'reproduction_rate', 'population_density', 'median_age',
            'cardiovasc_death_rate', 'diabetes_prevalence', 'female_smokers',
            'male_smokers', 'hospital_beds_per_thousand','life_expectancy',
            'human_development_index', 'stringency_index', 'cumulative_stringency', 'avg_stringency']

idx = mega.groupby("iso_code")['new_deaths_smoothed_per_million'].transform(max) == mega['new_deaths_smoothed_per_million']

df = mega
df = df[df['iso_code'].notna()]

sampled = df[idx].drop_duplicates(subset=['iso_code'])[features]
iso = df[idx].drop_duplicates(subset=['iso_code'])['iso_code']

set1 = sampled[sampled.cumulative_stringency < 40]
set2 = sampled[(sampled.cumulative_stringency < 70) & (sampled.cumulative_stringency > 40)]
set3 = sampled[sampled.cumulative_stringency > 70]

print (len(set1))
print (len(set2))
print (len(set3))

corr1 = set1.corr()
corr2 = set2.corr()
corr3 = set3.corr()

a4_dims = (12, 4)
fig, ax = plt.subplots(figsize=a4_dims, ncols=3)
fig.suptitle("Correlation differences, separated by stringency", fontsize=14)

sns.heatmap(
    corr1-corr2, 
    ax=ax[0], 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True, cbar=False
)
sns.heatmap(
    corr1-corr3, 
    ax=ax[1], 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True, cbar=False
)
sns.heatmap(
    corr2-corr3, 
    ax=ax[2], 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True, cbar=False
)


titles = ['[0, 40] correlation', '[40, 70] correlation', '[70, 100] correlation']
for i in range(len(ax)):
    a = ax[i]
    labels = ["" for x in a.get_yticklabels()]

    if i != 0:
        a.set_yticklabels(labels)
        a.set_yticks([])

    a.title.set_text(titles[i])

a4_dims = (12, 4)
fig, ax = plt.subplots(figsize=a4_dims, ncols=3)
fig.suptitle("Correlation matrices, separated by stringency", fontsize=14)

sns.heatmap(
    corr1, 
    ax=ax[0], 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True, cbar=False
)
sns.heatmap(
    corr2, 
    ax=ax[1], 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True, cbar=False
)
sns.heatmap(
    corr3, 
    ax=ax[2], 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True, cbar=False
)


titles = ['[0, 40] correlation', '[40, 70] correlation', '[70, 100] correlation']
for i in range(len(ax)):
    a = ax[i]
    labels = ["" for x in a.get_yticklabels()]

    if i != 0:
        a.set_yticklabels(labels)
        a.set_yticks([])

    a.title.set_text(titles[i])

corr1